# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from location_msgs/RTK.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RTK(genpy.Message):
  _md5sum = "6ebf4ab1d131fdca29632da4008b09ac"
  _type = "location_msgs/RTK"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 gpstime

float64 longitude
float64 latitude
float64 height

float64 heading
float64 pitch
float64 roll

float64 velocity

float64 AccelX
float64 AccelY
float64 AccelZ

int32 status"""
  __slots__ = ['gpstime','longitude','latitude','height','heading','pitch','roll','velocity','AccelX','AccelY','AccelZ','status']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gpstime,longitude,latitude,height,heading,pitch,roll,velocity,AccelX,AccelY,AccelZ,status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RTK, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.gpstime is None:
        self.gpstime = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.height is None:
        self.height = 0.
      if self.heading is None:
        self.heading = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.AccelX is None:
        self.AccelX = 0.
      if self.AccelY is None:
        self.AccelY = 0.
      if self.AccelZ is None:
        self.AccelZ = 0.
      if self.status is None:
        self.status = 0
    else:
      self.gpstime = 0.
      self.longitude = 0.
      self.latitude = 0.
      self.height = 0.
      self.heading = 0.
      self.pitch = 0.
      self.roll = 0.
      self.velocity = 0.
      self.AccelX = 0.
      self.AccelY = 0.
      self.AccelZ = 0.
      self.status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_11di().pack(_x.gpstime, _x.longitude, _x.latitude, _x.height, _x.heading, _x.pitch, _x.roll, _x.velocity, _x.AccelX, _x.AccelY, _x.AccelZ, _x.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 92
      (_x.gpstime, _x.longitude, _x.latitude, _x.height, _x.heading, _x.pitch, _x.roll, _x.velocity, _x.AccelX, _x.AccelY, _x.AccelZ, _x.status,) = _get_struct_11di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_11di().pack(_x.gpstime, _x.longitude, _x.latitude, _x.height, _x.heading, _x.pitch, _x.roll, _x.velocity, _x.AccelX, _x.AccelY, _x.AccelZ, _x.status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 92
      (_x.gpstime, _x.longitude, _x.latitude, _x.height, _x.heading, _x.pitch, _x.roll, _x.velocity, _x.AccelX, _x.AccelY, _x.AccelZ, _x.status,) = _get_struct_11di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11di = None
def _get_struct_11di():
    global _struct_11di
    if _struct_11di is None:
        _struct_11di = struct.Struct("<11di")
    return _struct_11di
